@mixin form-control-focus() {
  &:focus {
    color: $input-focus-color;
    background-color: $input-focus-bg;
    border-color: $input-focus-border-color;
    outline: 0;

    // Avoid using mixin so we can pass custom focus shadow properly
    @if $enable-shadows {
      box-shadow: $input-box-shadow, $input-focus-box-shadow;
    }

    @else {
      box-shadow: $input-focus-box-shadow;
    }
  }
}


@mixin form-validation-state($state, $color) {
  .#{$state}-feedback {
    display: none;
    width: 100%;
    margin-top: $form-feedback-margin-top;
    font-size: $form-feedback-font-size;
    color: $color;
  }

  .#{$state}-tooltip {
    position: absolute;
    top: 100%;
    z-index: 5;
    display: none;
    max-width: 100%; // Contain to parent when possible
    padding: .5rem;
    margin-top: .1rem;
    font-size: .875rem;
    line-height: 1;
    color: #fff;
    background-color: rgba($color, .8);
    border-radius: .2rem;
  }

  .form-control,
  .custom-select {

    .was-validated &:#{$state},
    &.is-#{$state} {
      border-color: $color;

      &:focus {
        border-color: $color;
        //box-shadow: 0 1px $input-focus-width 0 rgba($color, .75);
      }

      ~.#{$state}-feedback,
      ~.#{$state}-tooltip {
        display: block;
      }
    }
  }

  .form-check-input {

    .was-validated &:#{$state},
    &.is-#{$state} {
      ~.form-check-label {
        color: $color;
      }

      ~.#{$state}-feedback,
      ~.#{$state}-tooltip {
        display: block;
      }
    }
  }

  .custom-control-input {

    .was-validated &:#{$state},
    &.is-#{$state} {
      ~.custom-control-label {
        color: $color;

        &::before {
          background-color: lighten($color, 25%);
          border-color: lighten($color, 25%);
        }
      }

      ~.#{$state}-feedback,
      ~.#{$state}-tooltip {
        display: block;
      }

      &:checked {
        ~.custom-control-label::before {
          @include gradient-bg(lighten($color, 10%));
          border-color: lighten($color, 25%);
        }
      }

      &:focus {
        ~.custom-control-label::before {
          box-shadow: 0 0 0 1px $body-bg, 0 0 0 $input-focus-width rgba($color, .25);
        }
      }
    }
  }

  // custom file
  .custom-file-input {

    .was-validated &:#{$state},
    &.is-#{$state} {
      ~.custom-file-label {
        border-color: $color;

        &::before {
          border-color: inherit;
        }
      }

      ~.#{$state}-feedback,
      ~.#{$state}-tooltip {
        display: block;
      }

      &:focus {
        ~.custom-file-label {
          box-shadow: 0 0 0 $input-focus-width rgba($color, .25);
        }
      }
    }
  }
}

// Flexbox interpolation 


@mixin flex($properties) {
  @if $properties=='flex' {
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
  }

  @else if $properties=='inline-flex' {
    display: -ms-inline-flexbox;
    display: -webkit-inline-flex;
    display: inline-flex;
  }

  @else if $properties=='inline-block' {
    display: inline-block;
  }

  @else if $properties=='block' {
    display: block;
  }

  @else if $properties=='none' {
    display: none;
  }

  @else if $properties=='list-item' {
    display: list-item;
  }
}

// Usage

// @include flex(flex);

@mixin flex-direction($properties) {
  -webkit-flex-direction: $properties;
  -ms-flex-direction: $properties;
  flex-direction: $properties;
}

// Usage 

// @include flex-direction();


@mixin flex-wrap($properties) {
  @if $properties=='nowrap' {
    -webkit-flex-wrap: nowrap;
    -ms-flex-wrap: nowrap;
    flex-wrap: nowrap;
  }

  @else if $properties=='wrap' {
    -webkit-flex-wrap: wrap;
    -ms-flex-wrap: wrap;
    flex-wrap: wrap;
  }

  @else if $properties=='wrap-reverse' {
    -webkit-flex-wrap: wrap-reverse;
    -ms-flex-wrap: wrap-reverse;
    flex-wrap: wrap-reverse;
  }
}

// Usage 

// @include flex-wrap(wrap);


@mixin justify($properties) {
  @if $properties=='flex-start' {
    -webkit-justify-content: flex-start;
    -ms-flex-pack: start;
    justify-content: flex-start;
  }

  @else if $properties=='flex-end' {
    -webkit-justify-content: flex-end;
    -ms-flex-pack: end;
    justify-content: flex-end;
  }

  @else if $properties=='center' {
    -webkit-justify-content: center;
    -ms-flex-pack: center;
    justify-content: center;
  }

  @else if $properties=='space-between' {
    -webkit-justify-content: space-between;
    -ms-flex-pack: justify;
    justify-content: space-between;
  }

  @else if $properties=='space-around' {
    -webkit-justify-content: space-around;
    -ms-flex-pack: distribute;
    justify-content: space-around;
  }
}

// Usage 

// @include justify(center);

@mixin align-items($properties) {
  @if $properties=='flex-start' {
    -webkit-align-items: flex-start;
    -ms-flex-align: start;
    align-items: flex-start;
  }

  @else if $properties=='flex-end' {
    -webkit-align-items: flex-end;
    -ms-flex-align: end;
    align-items: flex-end;
  }

  @else if $properties=='center' {
    -webkit-align-items: center;
    -ms-flex-align: center;
    align-items: center;
  }

  @else if $properties=='baseline' {
    -webkit-align-items: baseline;
    -ms-flex-align: baseline;
    align-items: baseline;
  }

  @else if $properties=='stretch' {
    -webkit-align-items: stretch;
    -ms-flex-align: stretch;
    align-items: stretch;
  }
}

// Usage 

// @include align-items(center);

@mixin align-self($properties) {
  @if $properties=='auto' {
    -webkit-align-self: auto;
    -ms-flex-item-align: auto;
    align-self: auto;
  }

  @else if $properties=='flex-start' {
    -webkit-align-self: flex-start;
    -ms-flex-item-align: start;
    align-self: flex-start;
  }

  @else if $properties=='flex-end' {
    -webkit-align-self: flex-end;
    -ms-flex-item-align: end;
    align-self: flex-end;
  }

  @else if $properties=='center' {
    -webkit-align-self: center;
    -ms-flex-item-align: center;
    align-self: center;
  }

  @else if $properties=='baseline' {
    -webkit-align-self: baseline;
    -ms-flex-item-align: baseline;
    align-self: baseline;
  }

  @else if $properties=='stretch' {
    -webkit-align-self: stretch;
    -ms-flex-item-align: stretch;
    align-self: stretch;
  }
}

// Usage 

//  @include align-self (flex-start);

// Padding And Margin Mixin

@mixin margin-padding($m-direction, $m-amount, $p-direction, $p-amount) {

  //  ================================================================= Use this
  @if $m-direction==all {
    margin: $m-amount;
  }

  @else {
    margin-#{$m-direction}: $m-amount;
  }

  @if $p-direction==all {
    padding: $p-amount;
  }

  @else {
    padding-#{$p-direction}: $p-amount;
  }
}

// Uage 

// @include margin-padding(all, 0 0 0 0, all, 0 0 0 0);
// @include margin-padding(all, 0 0 0 0, all, null);

// Font size and line height mixin

@mixin font-rem($font-size, $line-height: 0) {
  //  ================================================================= Use this
  // font-size: $font-size;
  font-size: ($font-size / $rem-base-font) * 1rem;

  @if ($line-height > 0) {
    // line-height: $line-height;
    line-height: ($line-height / $rem-base-font) * 1rem;
  }
}

// Usage

// @include font-rem(14px, 24px);


// Box shadow Mixin

// @mixin box-shadow($leftshadow, $topshadow, $blurshadow, $colorShadow) {
//   -webkit-box-shadow: $leftshadow $topshadow $blurshadow $colorShadow;
//   -moz-box-shadow: $leftshadow $topshadow $blurshadow $colorShadow;
//   box-shadow: $leftshadow $topshadow $blurshadow $colorShadow;
// }
  
  // Usage 
  
  // @include box-shadow(0, 0, 0, rgba(0,0,0,1));